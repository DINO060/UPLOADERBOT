"""
Gestionnaire des clients Telegram (Bot API, Pyrogram, Telethon)
"""
import logging
from typing import Optional, Dict, Any
from pyrogram import Client as PyrogramClient
from telethon import TelegramClient as TelethonClient
from config import settings

logger = logging.getLogger(__name__)

class ClientManager:
    def __init__(self):
        self.pyro_user: Optional[PyrogramClient] = None
        self.telethon_user: Optional[TelethonClient] = None
        self._active = False
        self._pyro_failed = False
        self._telethon_failed = False

    async def start_clients(self):
        """D√©marre tous les clients avec gestion d'erreurs robuste"""
        if self._active:
            return

        try:
            logger.info("üîÑ Tentative de d√©marrage des clients...")
            
            # V√©rifier les configurations
            if not settings.api_id or not settings.api_hash:
                logger.error("‚ùå API_ID ou API_HASH manquant dans la configuration")
                logger.error("üí° Ajoutez ces valeurs dans votre fichier .env:")
                logger.error("   API_ID=votre_api_id")
                logger.error("   API_HASH=votre_api_hash")
                logger.error("üëâ Obtenez-les sur https://my.telegram.org")
                raise ValueError("Configuration manquante: API_ID/API_HASH")
                
            logger.info(f"üìã Configuration: API_ID={settings.api_id}, Session Pyrogram={settings.pyrogram_session}")
            
            # ‚úÖ D√âMARRAGE S√âCURIS√â DE PYROGRAM
            if not self._pyro_failed:
                try:
                    self.pyro_user = PyrogramClient(
                        settings.pyrogram_session,
                        api_id=settings.api_id,
                        api_hash=settings.api_hash,
                        bot_token=settings.bot_token,
                        in_memory=True  # ‚úÖ √âviter les probl√®mes de session
                    )
                    logger.info("üîÑ D√©marrage client Pyrogram...")
                    await self.pyro_user.start()
                    
                    # ‚úÖ TEST DE CONNECTIVIT√â
                    try:
                        me = await self.pyro_user.get_me()
                        logger.info(f"‚úÖ Client Pyrogram (BOT) d√©marr√©: @{me.username}")
                    except Exception as test_error:
                        logger.warning(f"‚ö†Ô∏è Test connectivit√© Pyrogram √©chou√©: {test_error}")
                        
                except Exception as pyro_error:
                    logger.error(f"‚ùå √âchec d√©marrage Pyrogram: {pyro_error}")
                    self._pyro_failed = True
                    self.pyro_user = None

            # ‚úÖ D√âMARRAGE S√âCURIS√â DE TELETHON
            if not self._telethon_failed:
                try:
                    self.telethon_user = TelethonClient(
                        settings.telethon_session,
                        settings.api_id,
                        settings.api_hash,
                        auto_reconnect=True,  # ‚úÖ Reconnexion automatique
                        connection_retries=3  # ‚úÖ Limite les tentatives
                    )
                    logger.info("üîÑ D√©marrage client Telethon...")
                    await self.telethon_user.start(bot_token=settings.bot_token)
                    
                    # ‚úÖ TEST DE CONNECTIVIT√â
                    try:
                        me = await self.telethon_user.get_me()
                        logger.info(f"‚úÖ Client Telethon (BOT) d√©marr√©: @{me.username}")
                    except Exception as test_error:
                        logger.warning(f"‚ö†Ô∏è Test connectivit√© Telethon √©chou√©: {test_error}")
                        
                except Exception as tele_error:
                    logger.error(f"‚ùå √âchec d√©marrage Telethon: {tele_error}")
                    self._telethon_failed = True
                    self.telethon_user = None

            # ‚úÖ V√âRIFICATION FINALE
            if self.pyro_user or self.telethon_user:
                self._active = True
                available_clients = []
                if self.pyro_user:
                    available_clients.append("Pyrogram")
                if self.telethon_user:
                    available_clients.append("Telethon")
                logger.info(f"‚úÖ Clients disponibles: {', '.join(available_clients)}")
            else:
                logger.error("‚ùå Aucun client n'a pu √™tre d√©marr√©")
                raise Exception("Tous les clients ont √©chou√©")

        except Exception as e:
            logger.error(f"‚ùå Erreur critique lors du d√©marrage des clients: {e}")
            await self.stop_clients()
            # Ne pas relancer l'erreur pour permettre au bot de fonctionner en mode d√©grad√©
            logger.warning("‚ö†Ô∏è Bot continuera en mode d√©grad√© (API Bot seulement)")

    async def stop_clients(self):
        """Arr√™te tous les clients avec gestion d'erreurs"""
        try:
            if self.pyro_user:
                try:
                    await self.pyro_user.stop()
                    logger.info("‚úÖ Client Pyrogram arr√™t√©")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur arr√™t Pyrogram: {e}")

            if self.telethon_user:
                try:
                    await self.telethon_user.disconnect()
                    logger.info("‚úÖ Client Telethon arr√™t√©")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur arr√™t Telethon: {e}")

        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'arr√™t des clients: {e}")
        finally:
            self._active = False
            self.pyro_user = None
            self.telethon_user = None

    async def get_best_client(self, file_size: int, operation: str) -> Dict[str, Any]:
        """
        Retourne le meilleur client pour une op√©ration donn√©e.
        
        Args:
            file_size: Taille du fichier en bytes
            operation: Type d'op√©ration ('upload', 'thumbnail', 'rename', etc.)
        
        Returns:
            Dict contenant le client et son type
        """
        logger.info(f"üîç get_best_client: operation={operation}, file_size={file_size/1024/1024:.1f}MB")
        
        if not self._active:
            logger.info("‚ö†Ô∏è Clients non actifs, tentative de d√©marrage...")
            await self.start_clients()

        # ‚úÖ S√âLECTION INTELLIGENTE AVEC FALLBACK
        if operation in ["thumbnail", "rename", "download"]:
            # Priorit√© Pyrogram pour ces op√©rations
            if self.pyro_user and not self._pyro_failed:
                logger.info(f"‚úÖ S√©lection Pyrogram pour {operation}")
                return {"client": self.pyro_user, "type": "pyrogram"}
            elif self.telethon_user and not self._telethon_failed:
                logger.info(f"‚úÖ Fallback Telethon pour {operation}")
                return {"client": self.telethon_user, "type": "telethon"}
            else:
                logger.error(f"‚ùå Aucun client disponible pour {operation}")
                raise Exception(f"Aucun client disponible pour {operation}")
                
        elif operation == "upload":
            if file_size <= settings.bot_max_size:  # ‚â§ 50 MB
                # Pr√©f√©rer Pyrogram pour les petits fichiers
                if self.pyro_user and not self._pyro_failed:
                    logger.info(f"‚úÖ Pyrogram pour upload ‚â§ 50MB")
                    return {"client": self.pyro_user, "type": "pyrogram"}
                elif self.telethon_user and not self._telethon_failed:
                    logger.info(f"‚úÖ Fallback Telethon pour upload ‚â§ 50MB")
                    return {"client": self.telethon_user, "type": "telethon"}
            else:
                # Pr√©f√©rer Telethon pour les gros fichiers
                if self.telethon_user and not self._telethon_failed:
                    logger.info(f"‚úÖ Telethon pour upload > 50MB")
                    return {"client": self.telethon_user, "type": "telethon"}
                elif self.pyro_user and not self._pyro_failed:
                    logger.info(f"‚úÖ Fallback Pyrogram pour upload > 50MB")
                    return {"client": self.pyro_user, "type": "pyrogram"}
        
        # ‚úÖ FALLBACK G√âN√âRAL
        if self.telethon_user and not self._telethon_failed:
            logger.info(f"‚úÖ Telethon par d√©faut pour {operation}")
            return {"client": self.telethon_user, "type": "telethon"}
        elif self.pyro_user and not self._pyro_failed:
            logger.info(f"‚úÖ Pyrogram par d√©faut pour {operation}")
            return {"client": self.pyro_user, "type": "pyrogram"}
        else:
            logger.error(f"‚ùå Aucun client fonctionnel disponible")
            raise Exception("Aucun client fonctionnel disponible")

    async def get_pyrogram_client(self) -> Optional[PyrogramClient]:
        """
        Retourne le client Pyrogram s'il est disponible.
        
        Returns:
            Client Pyrogram ou None
        """
        if not self._active:
            await self.start_clients()
        return self.pyro_user if not self._pyro_failed else None

    async def get_telethon_client(self) -> Optional[TelethonClient]:
        """
        Retourne le client Telethon s'il est disponible.
        
        Returns:
            Client Telethon ou None
        """
        if not self._active:
            await self.start_clients()
        return self.telethon_user if not self._telethon_failed else None

    async def handle_peer_error(self, client_type: str, error: Exception):
        """
        G√®re les erreurs de Peer ID invalide et autres erreurs critiques.
        
        Args:
            client_type: Type de client ('pyrogram' ou 'telethon')
            error: Exception re√ßue
        """
        error_str = str(error)
        
        if "Peer id invalid" in error_str or "peer id invalid" in error_str.lower():
            logger.warning(f"‚ö†Ô∏è {client_type}: Peer ID invalide d√©tect√© - {error_str}")
            
            if client_type == "pyrogram":
                logger.warning("‚ö†Ô∏è D√©sactivation temporaire du client Pyrogram")
                self._pyro_failed = True
            elif client_type == "telethon":
                logger.warning("‚ö†Ô∏è D√©sactivation temporaire du client Telethon")
                self._telethon_failed = True
                
            logger.info("üí° Solution: V√©rifiez que le bot a acc√®s au canal/groupe cible")
            
        elif "FILE_REFERENCE_EXPIRED" in error_str:
            logger.warning(f"‚ö†Ô∏è {client_type}: R√©f√©rence de fichier expir√©e - {error_str}")
            logger.info("üí° Solution: Le fichier doit √™tre renvoy√© directement au bot")
            
        else:
            logger.error(f"‚ùå {client_type}: Erreur non g√©r√©e - {error_str}")

# Instance globale du gestionnaire de clients
client_manager = ClientManager() 