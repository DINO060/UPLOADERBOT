"""
Bot Telegram pour la gestion des publications avec r√©actions et boutons URL
"""

import os
# Configuration de l'encodage pour g√©rer correctement les emojis
os.environ['PYTHONIOENCODING'] = 'utf-8'

import re
import logging
import asyncio
import sqlite3
import io
from datetime import datetime, timedelta
from functools import wraps
from typing import Optional, List, Dict, Any, Callable, Awaitable
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes
)
from dotenv import load_dotenv
import pytz
import time
import sys
import platform
from telethon import TelegramClient
import math
from PIL import Image
from conversation_states import (
    MAIN_MENU, POST_CONTENT, POST_ACTIONS, SEND_OPTIONS, AUTO_DESTRUCTION,
    SCHEDULE_SEND, EDIT_POST, SCHEDULE_SELECT_CHANNEL, STATS_SELECT_CHANNEL,
    WAITING_CHANNEL_INFO, SETTINGS, BACKUP_MENU, WAITING_CHANNEL_SELECTION,
    WAITING_PUBLICATION_CONTENT, WAITING_TIMEZONE, WAITING_THUMBNAIL,
    WAITING_REACTION_INPUT, WAITING_URL_INPUT, WAITING_RENAME_INPUT,
    WAITING_SCHEDULE_TIME, WAITING_EDIT_TIME, WAITING_CUSTOM_USERNAME,
    WAITING_TAG_INPUT
)
from config import settings
from database.manager import DatabaseManager
from handlers.reaction_functions import (
    handle_reaction_input,
    handle_url_input,
    remove_reactions,
    remove_url_buttons,
    add_reactions_to_post,
    add_url_button_to_post,
)
from utils.scheduler import SchedulerManager
# Imports schedule_handler supprim√©s - utilisation de callback_handlers.py
from handlers.thumbnail_handler import (
    handle_thumbnail_functions,
    handle_add_thumbnail_to_post,
    handle_set_thumbnail_and_rename,
    handle_view_thumbnail,
    handle_delete_thumbnail,
    handle_thumbnail_input,
    handle_add_thumbnail
)
from pyrogram import Client
from handlers.callback_handlers import handle_callback, send_post_now
from handlers.message_handlers import handle_text, handle_media, handle_channel_info, handle_post_content, handle_tag_input
from handlers.media_handler import send_file_smart

load_dotenv()

# Wrapper pour handle_schedule_time
async def handle_schedule_time_wrapper(update, context):
    """Wrapper pour handle_schedule_time"""
    try:
        from handlers.callback_handlers import handle_schedule_time
        return await handle_schedule_time(update, context)
    except Exception as e:
        logger.error(f"‚ùå Erreur dans handle_schedule_time_wrapper: {e}")
        return MAIN_MENU

# Configuration des boutons ReplyKeyboard (en haut du fichier)
REPLY_KEYBOARD_BUTTONS = ["üìã Aper√ßu", "üöÄ Envoyer", "üóëÔ∏è Tout supprimer", "‚ùå Annuler"]

# Filtre intelligent pour les boutons ReplyKeyboard
class ReplyKeyboardButtonFilter(filters.MessageFilter):
    def filter(self, message):
        if not message.text:
            return False
        text = message.text.strip().lower()
        # V√©rifier si c'est un de nos boutons (sans tenir compte des emojis)
        return any(keyword in text for keyword in ["aper√ßu", "envoyer", "tout supprimer", "annuler"])

reply_keyboard_filter = filters.TEXT & ReplyKeyboardButtonFilter()

# Fonction pour cr√©er le ReplyKeyboard standard
def create_reply_keyboard():
    """Cr√©e le clavier de r√©ponse standard"""
    reply_keyboard = [
        [KeyboardButton("üìã Aper√ßu"), KeyboardButton("üöÄ Envoyer")],
        [KeyboardButton("üóëÔ∏è Tout supprimer"), KeyboardButton("‚ùå Annuler")]
    ]
    return ReplyKeyboardMarkup(
        reply_keyboard,
        resize_keyboard=True,
        one_time_keyboard=False
    )

# Handler principal pour TOUS les boutons ReplyKeyboard
async def handle_reply_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re TOUS les boutons ReplyKeyboard de mani√®re intelligente"""
    try:
        user_text = update.message.text.strip()
        logger.info(f"üéØ REPLYKEYBOARD: Bouton '{user_text}' cliqu√©")
        
        # R√©cup√©rer le contexte
        posts = context.user_data.get("posts", [])
        selected_channel = context.user_data.get('selected_channel', {})
        
        if "aper√ßu" in user_text.lower():
            if not posts:
                await update.message.reply_text(
                    "üîç **Aper√ßu indisponible**\n\nAucune publication en cours de cr√©ation.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
                    ]]),
                    parse_mode='Markdown'
                )
                return MAIN_MENU
            else:
                # Afficher l'aper√ßu d√©taill√© des posts
                for i, post in enumerate(posts):
                    try:
                        preview_text = f"üìã **Aper√ßu post {i + 1}**\n\n"
                        preview_text += f"Type: {post.get('type', 'Inconnu')}\n"
                        preview_text += f"Canal: {post.get('channel_name', 'Non d√©fini')}\n"
                        
                        if post.get('type') == 'text':
                            content_preview = post.get('content', '')[:200]
                            if len(post.get('content', '')) > 200:
                                content_preview += '...'
                            preview_text += f"Contenu: {content_preview}"
                            await update.message.reply_text(preview_text, parse_mode="Markdown")
                        else:
                            caption_preview = post.get('caption', '')
                            if caption_preview:
                                preview_text += f"L√©gende: {caption_preview[:100]}"
                                if len(caption_preview) > 100:
                                    preview_text += '...'
                            
                            if post.get('type') == 'photo':
                                await context.bot.send_photo(
                                    chat_id=update.effective_chat.id,
                                    photo=post.get('content'),
                                    caption=preview_text,
                                    parse_mode="Markdown"
                                )
                            elif post.get('type') == 'video':
                                await context.bot.send_video(
                                    chat_id=update.effective_chat.id,
                                    video=post.get('content'),
                                    caption=preview_text,
                                    parse_mode="Markdown"
                                )
                            elif post.get('type') == 'document':
                                await context.bot.send_document(
                                    chat_id=update.effective_chat.id,
                                    document=post.get('content'),
                                    caption=preview_text,
                                    parse_mode="Markdown"
                                )
                    except Exception as e:
                        logger.error(f"Erreur aper√ßu post {i}: {e}")
                        await update.message.reply_text(f"‚ùå Erreur aper√ßu post {i + 1}")
                
                # Message de synth√®se avec actions
                await update.message.reply_text(
                    f"üìã **Aper√ßu termin√©** - {len(posts)} publication(s) affich√©e(s)",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üöÄ Envoyer maintenant", callback_data="send_now"),
                        InlineKeyboardButton("üìù Modifier", callback_data="edit_posts")
                    ], [
                        InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
                    ]]),
                    parse_mode='Markdown'
                )
                return WAITING_PUBLICATION_CONTENT
        
        elif "envoyer" in user_text.lower():
            return await handle_send_button(update, context)
        
        elif "tout supprimer" in user_text.lower():
            if not posts:
                await update.message.reply_text(
                    "üóëÔ∏è **Corbeille vide**\n\nAucune publication √† supprimer.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
                    ]]),
                    parse_mode='Markdown'
                )
                return MAIN_MENU
            else:
                # Supprimer tous les posts
                context.user_data['posts'] = []
                context.user_data.pop('selected_channel', None)
                
                await update.message.reply_text(
                    f"üóëÔ∏è **Publications supprim√©es**\n\n{len(posts)} publication(s) supprim√©e(s) avec succ√®s.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
                    ]]),
                    parse_mode='Markdown'
                )
                return MAIN_MENU
        
        elif "annuler" in user_text.lower():
            # Nettoyer toutes les donn√©es
            context.user_data.clear()
            
            await update.message.reply_text(
                "‚ùå **Op√©ration annul√©e**\n\nToutes les donn√©es temporaires ont √©t√© effac√©es.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
                ]]),
                parse_mode='Markdown'
            )
            return MAIN_MENU
        
        # Fallback pour les autres cas
        await update.message.reply_text(
            "‚ùì **Bouton non reconnu**\n\nUtilisez les boutons disponibles ci-dessous.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
            ]])
        )
        return MAIN_MENU
        
    except Exception as e:
        logger.error(f"Erreur dans handle_reply_keyboard: {e}")
        await update.message.reply_text(
            "‚ùå Une erreur est survenue.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
            ]])
        )
        return MAIN_MENU

# -----------------------------------------------------------------------------
# CONFIGURATION DU LOGGING
# -----------------------------------------------------------------------------
def setup_logging():
    """Configure le syst√®me de logging"""
    # Cr√©er le dossier logs s'il n'existe pas
    if not os.path.exists('logs'):
        os.makedirs('logs')

    # Configuration du logger principal
    logger = logging.getLogger('UploaderBot')
    logger.setLevel(logging.INFO)

    # Handler pour la console avec encodage UTF-8
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    console_handler.setFormatter(formatter)
    console_handler.stream.reconfigure(encoding='utf-8')  # Configuration de l'encodage UTF-8
    logger.addHandler(console_handler)

    # Handler pour le fichier avec encodage UTF-8
    file_handler = logging.FileHandler('logs/bot.log', encoding='utf-8')
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)

    return logger

# Configuration globale
logger = setup_logging()

# -----------------------------------------------------------------------------
# RATE LIMITER
# -----------------------------------------------------------------------------
class RateLimiter:
    def __init__(self):
        self.user_timestamps = {}

    async def can_send_message(self, chat_id, user_id, limit=1, per_seconds=1):
        now = time.time()
        key = (chat_id, user_id)
        timestamps = self.user_timestamps.get(key, [])
        # On ne garde que les timestamps r√©cents
        timestamps = [t for t in timestamps if now - t < per_seconds]
        if len(timestamps) < limit:
            timestamps.append(now)
            self.user_timestamps[key] = timestamps
            return True
        return False

rate_limiter = RateLimiter()

# -----------------------------------------------------------------------------
# FONCTIONS UTILITAIRES
# -----------------------------------------------------------------------------
def normalize_channel_username(channel_username):
    """
    Normalise le nom d'utilisateur d'un canal en enlevant le @ s'il est pr√©sent
    Retourne None si l'entr√©e est vide ou None
    """
    if not channel_username:
        return None
    return channel_username.lstrip('@') if isinstance(channel_username, str) else None

def debug_thumbnail_search(user_id, channel_username, db_manager):
    """Fonction de debug pour diagnostiquer les probl√®mes de recherche de thumbnails"""
    logger.info(f"=== DEBUG THUMBNAIL SEARCH ===")
    logger.info(f"User ID: {user_id}")
    logger.info(f"Channel Username Original: '{channel_username}'")
    
    # Normalisation
    clean_username = normalize_channel_username(channel_username)
    logger.info(f"Channel Username Normalis√©: '{clean_username}'")
    
    # Tester diff√©rentes variantes
    test_variants = [
        channel_username,
        clean_username,
        f"@{clean_username}" if clean_username and not clean_username.startswith('@') else clean_username,
        clean_username.lstrip('@') if clean_username else None
    ]
    
    logger.info(f"Variants √† tester: {test_variants}")
    
    # Tester chaque variant
    for variant in test_variants:
        if variant:
            result = db_manager.get_thumbnail(variant, user_id)
            logger.info(f"Test variant '{variant}': {result}")
    
    # V√©rifier directement dans la base de donn√©es
    try:
        conn = sqlite3.connect(settings.db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT channel_username, thumbnail_file_id FROM channel_thumbnails WHERE user_id = ?", (user_id,))
        all_thumbnails = cursor.fetchall()
        logger.info(f"TOUS les thumbnails pour user {user_id}: {all_thumbnails}")
        conn.close()
    except Exception as e:
        logger.error(f"Erreur lors de la v√©rification DB: {e}")
    
    logger.info(f"=== FIN DEBUG ===")

def ensure_thumbnail_table_exists():
    """S'assure que la table channel_thumbnails existe"""
    try:
        conn = sqlite3.connect(settings.db_path)
        cursor = conn.cursor()
        
        # V√©rifier si la table existe
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='channel_thumbnails'")
        table_exists = cursor.fetchone() is not None
        
        if not table_exists:
            logger.info("Cr√©ation de la table channel_thumbnails manquante...")
            cursor.execute('''
                CREATE TABLE channel_thumbnails (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    channel_username TEXT NOT NULL,
                    user_id INTEGER NOT NULL,
                    thumbnail_file_id TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(channel_username, user_id)
                )
            ''')
            conn.commit()
            logger.info("‚úÖ Table channel_thumbnails cr√©√©e avec succ√®s!")
        else:
            logger.info("‚úÖ Table channel_thumbnails existe d√©j√†")
        
        conn.close()
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation de la table channel_thumbnails: {e}")
        return False

# Initialisation de la base de donn√©es
db_manager = DatabaseManager()
db_manager.setup_database()

# V√©rifier et cr√©er la table channel_thumbnails si n√©cessaire
def ensure_channel_thumbnails_table():
    """S'assure que la table channel_thumbnails existe dans la base de donn√©es"""
    try:
        cursor = db_manager.connection.cursor()
        
        # V√©rifier si la table existe
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='channel_thumbnails'")
        table_exists = cursor.fetchone() is not None
        
        if not table_exists:
            logger.info("‚ö†Ô∏è Table channel_thumbnails manquante - cr√©ation en cours...")
            cursor.execute('''
                CREATE TABLE channel_thumbnails (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    channel_username TEXT NOT NULL,
                    user_id INTEGER NOT NULL,
                    thumbnail_file_id TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(channel_username, user_id)
                )
            ''')
            db_manager.connection.commit()
            logger.info("‚úÖ Table channel_thumbnails cr√©√©e avec succ√®s!")
        else:
            logger.info("‚úÖ Table channel_thumbnails existe d√©j√†")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la v√©rification de la table channel_thumbnails: {e}")
        return False

# Ex√©cuter la v√©rification
ensure_channel_thumbnails_table()

logger.info(f"Base de donn√©es initialis√©e avec succ√®s")

# -----------------------------------------------------------------------------
# DECORATEURS ET UTILITAIRES
# -----------------------------------------------------------------------------
def admin_only(func):
    @wraps(func)
    async def wrapped(update, context, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in settings.ADMIN_IDS:
            await update.message.reply_text("‚ùå Vous n'avez pas les permissions n√©cessaires.")
            return
        return await func(update, context, *args, **kwargs)


async def retry_operation(operation, max_retries=3, delay=1):
    for attempt in range(max_retries):
        try:
            return await operation()
        except Exception as e:
            if attempt == max_retries - 1:
                raise
            logger.warning(f"Tentative {attempt + 1} √©chou√©e: {e}")
            await asyncio.sleep(delay * (attempt + 1))


# -----------------------------------------------------------------------------
# D√âFINITION DES √âTATS DE LA CONVERSATION
# -----------------------------------------------------------------------------
# Stockage des r√©actions
reaction_counts = {}

# Variable globale pour le userbot
userbot = None

# Ensemble pour stocker les callbacks d√©j√† trait√©s
processed_callbacks = set()

# Filtres personnalis√©s
class WaitingForUrlFilter(filters.MessageFilter):
    def filter(self, message):
        if not message.text:
            return False
        context = message.get_bot().application.user_data.get(message.from_user.id, {})
        return context.get('waiting_for_url', False)

class WaitingForReactionsFilter(filters.MessageFilter):
    def filter(self, message):
        if not message.text:
            return False
        context = message.get_bot().application.user_data.get(message.from_user.id, {})
        return context.get('waiting_for_reactions', False)

# Instances des filtres (ancienne classe ReplyKeyboardFilter supprim√©e - conflit avec la nouvelle)
waiting_for_url_filter = WaitingForUrlFilter()
waiting_for_reactions_filter = WaitingForReactionsFilter()
# reply_keyboard_filter est maintenant d√©fini plus haut avec ReplyKeyboardButtonFilter






# SchedulerManager maintenant import√© de schedule_handler


# Fonction pour initialiser le client Telethon
async def start_telethon_client():
    """Initialise le client Telethon"""
    try:
        client = TelegramClient(settings.SESSION_NAME, settings.API_ID, settings.API_HASH)
        await client.start()
        logger.info("Client Telethon d√©marr√© avec succ√®s")
        return client
    except Exception as e:
        logger.error(f"Erreur lors du d√©marrage du client Telethon: {e}")
        return None


async def init_userbot():
    """Initialise le userbot au d√©marrage du bot"""
    global userbot
    userbot = await start_telethon_client()
    return userbot


def log_conversation_state(update, context, function_name, state_return):
    """Enregistre les informations d'√©tat de conversation pour d√©bogage"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    logger.info(f"[√âTAT] Fonction: {function_name}, Utilisateur: {user_id}, Chat: {chat_id}")
    logger.info(f"[√âTAT] √âtat de retour: {state_return}")
    logger.info(f"[√âTAT] √âtat stock√©: {context.user_data.get('conversation_state', 'Non d√©fini')}")

    # D√©tecter les incoh√©rences potentielles
    if 'conversation_state' in context.user_data and state_return != context.user_data['conversation_state']:
        logger.warning(
            f"[√âTAT] Incoh√©rence d√©tect√©e! Retour: {state_return}, Stock√©: {context.user_data['conversation_state']}")

    # Mettre √† jour l'√©tat stock√©
    context.user_data['conversation_state'] = state_return

    return state_return


# Fonction start supprim√©e - utilise maintenant command_handlers.start dans CommandHandlers

# Fonction create_publication supprim√©e - utilise maintenant handle_create_publication dans callback_handlers.py


# planifier_post maintenant import√© de schedule_handler


# Fonction send_post_now d√©plac√©e vers callback_handlers.py pour √©viter l'import circulaire
# Elle est maintenant import√©e depuis callback_handlers


async def handle_set_thumbnail_and_rename(update, context):
    """Applique le thumbnail ET permet de renommer le fichier"""
    query = update.callback_query
    await query.answer()
    
    try:
        # Extraire l'index du post
        post_index = int(query.data.split("_")[-1])
        
        # V√©rifier que le post existe
        if 'posts' not in context.user_data or post_index >= len(context.user_data['posts']):
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚ùå Post introuvable.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
                ]])
            )
            return MAIN_MENU
        
        post = context.user_data['posts'][post_index]
        channel_username = post.get('channel', context.user_data.get('selected_channel', {}).get('username'))
        user_id = update.effective_user.id
        
        # Utiliser la fonction de normalisation
        clean_username = normalize_channel_username(channel_username)
        
        if not clean_username:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚ùå Impossible de d√©terminer le canal cible.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
                ]])
            )
            return MAIN_MENU
        
        # R√©cup√©rer et appliquer le thumbnail
        thumbnail_file_id = db_manager.get_thumbnail(clean_username, user_id)
        
        if thumbnail_file_id:
            post['thumbnail'] = thumbnail_file_id
            thumbnail_status = "‚úÖ Thumbnail appliqu√©"
        else:
            thumbnail_status = "‚ö†Ô∏è Aucun thumbnail enregistr√© pour ce canal"
        
        # Stocker l'index pour le renommage
        context.user_data['waiting_for_rename'] = True
        context.user_data['current_post_index'] = post_index
        
        # Demander le nouveau nom
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"üñºÔ∏è‚úèÔ∏è Thumbnail + Renommage\n\n"
                 f"{thumbnail_status}\n\n"
                 f"Maintenant, envoyez-moi le nouveau nom pour votre fichier (avec l'extension).\n"
                 f"Par exemple: mon_document.pdf",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå Annuler", callback_data=f"cancel_rename_{post_index}")
            ]])
        )
        
        return WAITING_RENAME_INPUT
        
    except Exception as e:
        logger.error(f"Erreur dans handle_set_thumbnail_and_rename: {e}")
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚ùå Une erreur est survenue.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
            ]])
        )
        return MAIN_MENU

async def handle_view_thumbnail(update, context):
    """Affiche le thumbnail enregistr√© pour un canal"""
    query = update.callback_query
    await query.answer()
    
    channel_username = context.user_data.get('custom_channel')
    if not channel_username:
        selected_channel = context.user_data.get('selected_channel', {})
        channel_username = selected_channel.get('username')
    
    if not channel_username:
        await query.edit_message_text(
            "‚ùå Aucun canal s√©lectionn√©.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚Ü©Ô∏è Retour", callback_data="custom_settings")
            ]])
        )
        return SETTINGS
    
    user_id = update.effective_user.id
    clean_username = normalize_channel_username(channel_username)
    
    thumbnail_file_id = db_manager.get_thumbnail(clean_username, user_id)
    
    if thumbnail_file_id:
        try:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=thumbnail_file_id,
                caption=f"üñºÔ∏è Thumbnail actuel pour @{clean_username}"
            )
            
            keyboard = [
                [InlineKeyboardButton("üîÑ Changer", callback_data="add_thumbnail")],
                [InlineKeyboardButton("üóëÔ∏è Supprimer", callback_data="delete_thumbnail")],
                [InlineKeyboardButton("‚Ü©Ô∏è Retour", callback_data="thumbnail_menu")]
            ]
            
            await query.message.reply_text(
                "Que voulez-vous faire avec ce thumbnail?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"Erreur lors de l'affichage du thumbnail: {e}")
            await query.edit_message_text(
                "‚ùå Impossible d'afficher le thumbnail.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è Retour", callback_data="thumbnail_menu")
                ]])
            )
    else:
        await query.edit_message_text(
            "‚ùå Aucun thumbnail enregistr√© pour ce canal.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚Ü©Ô∏è Retour", callback_data="thumbnail_menu")
            ]])
        )
    
    return SETTINGS

async def handle_delete_thumbnail(update, context):
    """Supprime le thumbnail enregistr√© pour un canal"""
    query = update.callback_query
    await query.answer()
    
    channel_username = context.user_data.get('custom_channel')
    if not channel_username:
        selected_channel = context.user_data.get('selected_channel', {})
        channel_username = selected_channel.get('username')
    
    if not channel_username:
        await query.edit_message_text(
            "‚ùå Aucun canal s√©lectionn√©.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚Ü©Ô∏è Retour", callback_data="custom_settings")
            ]])
        )
        return SETTINGS
    
    user_id = update.effective_user.id
    clean_username = normalize_channel_username(channel_username)
    
    if db_manager.delete_thumbnail(clean_username, user_id):
        await query.edit_message_text(
            f"‚úÖ Thumbnail supprim√© pour @{clean_username}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚Ü©Ô∏è Retour", callback_data="thumbnail_menu")
            ]])
        )
    else:
        await query.edit_message_text(
            "‚ùå Erreur lors de la suppression du thumbnail.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚Ü©Ô∏è Retour", callback_data="thumbnail_menu")
            ]])
        )
    
    return SETTINGS

async def handle_rename_input(update, context):
    """G√®re la saisie du nouveau nom de fichier"""
    try:
        if not context.user_data.get('waiting_for_rename') or 'current_post_index' not in context.user_data:
            await update.message.reply_text(
                "‚ùå Aucun renommage en cours.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
                ]])
            )
            return MAIN_MENU
        
        post_index = context.user_data['current_post_index']
        new_filename = update.message.text.strip()
        
        # Les boutons ReplyKeyboard sont maintenant g√©r√©s par le handler contextuel
        # Cette fonction ne traite que les vrais noms de fichiers
        
        # Validation du nom de fichier
        if not new_filename or '/' in new_filename or '\\' in new_filename:
            await update.message.reply_text(
                "‚ùå Nom de fichier invalide. √âvitez les caract√®res sp√©ciaux / et \\.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå Annuler", callback_data=f"cancel_rename_{post_index}")
                ]])
            )
            return WAITING_RENAME_INPUT
        
        # Appliquer le nouveau nom
        if 'posts' in context.user_data and post_index < len(context.user_data['posts']):
            context.user_data['posts'][post_index]['filename'] = new_filename
            
            # Nettoyer les variables temporaires
            context.user_data.pop('waiting_for_rename', None)
            context.user_data.pop('current_post_index', None)
            
            await update.message.reply_text(
                f"‚úÖ Fichier renomm√© en : {new_filename}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
                ]])
            )
            
            return WAITING_PUBLICATION_CONTENT
        else:
            await update.message.reply_text(
                "‚ùå Post introuvable.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
                ]])
            )
            return MAIN_MENU
    
    except Exception as e:
        logger.error(f"Erreur dans handle_rename_input: {e}")
        await update.message.reply_text(
            "‚ùå Une erreur est survenue.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
            ]])
        )
        return MAIN_MENU

def is_valid_channel_username(username):
    """
    V√©rifie que le username commence par @ ou t.me/ et ne contient pas d'espaces
    """
    if not username:
        return False
    username = username.strip()
    return (username.startswith('@') or username.startswith('t.me/')) and ' ' not in username


def clean_channel_username(username):
    """
    Nettoie le username du canal en enlevant les pr√©fixes @ et t.me/
    """
    if not username:
        return None
    username = username.strip()
    if username.startswith('@'):
        return username[1:]
    elif username.startswith('t.me/'):
        return username[5:]
    return username


async def remove_reactions(update, context):
    """Supprime les r√©actions d'un message"""
    try:
        if not update.callback_query:
            return
        message = update.callback_query.message
        if not message:
            await update.callback_query.answer("Message non trouv√©")
            return
        message_id = message.message_id
        chat_id = message.chat_id
        try:
            await context.bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=None
            )
            await update.callback_query.answer("‚úÖ R√©actions supprim√©es")
        except Exception as e:
            logger.error(f"Erreur lors de la suppression des r√©actions: {e}")
            await update.callback_query.answer("‚ùå Erreur lors de la suppression des r√©actions")
    except Exception as e:
        logger.error(f"Erreur dans remove_reactions: {e}")
        if update.callback_query:
            await update.callback_query.answer("‚ùå Une erreur est survenue")


async def remove_url_buttons(update, context):
    """Supprime les boutons URL d'un message"""
    try:
        if not update.callback_query:
            return
        message = update.callback_query.message
        if not message:
            await update.callback_query.answer("Message non trouv√©")
            return
        message_id = message.message_id
        chat_id = message.chat_id
        try:
            await context.bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=None
            )
            await update.callback_query.answer("‚úÖ Boutons URL supprim√©s")
        except Exception as e:
            logger.error(f"Erreur lors de la suppression des boutons URL: {e}")
            await update.callback_query.answer("‚ùå Erreur lors de la suppression des boutons URL")
    except Exception as e:
        logger.error(f"Erreur dans remove_url_buttons: {e}")
        if update.callback_query:
            await update.callback_query.answer("‚ùå Une erreur est survenue")


async def send_preview_file(update, context, post_index):
    """Envoie une pr√©visualisation du fichier √† l'utilisateur"""
    try:
        posts = context.user_data.get("posts", [])
        if not posts or post_index >= len(posts):
            await update.callback_query.answer("‚ùå Aucun fichier trouv√©")
            return
        post = posts[post_index]
        file_id = post.get("file_id")
        file_name = post.get("file_name", "fichier")
        file_size = post.get("file_size", 0)
        caption = post.get("caption", "")
        if not file_id:
            await update.callback_query.answer("‚ùå Fichier non trouv√©")
            return
        preview_text = (
            f"üìÅ Pr√©visualisation du fichier {post_index + 1}/{len(posts)}\n\n"
            f"üìù Nom: {file_name}\n"
            f"üìä Taille: {file_size / 1024 / 1024:.2f} MB\n"
        )
        if caption:
            preview_text += f"\nüìù L√©gende: {caption}"
        try:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=file_id,
                caption=preview_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå Supprimer", callback_data=f"delete_file_{post_index}")],
                    [InlineKeyboardButton("üìù Modifier la l√©gende", callback_data=f"edit_caption_{post_index}")]
                ])
            )
            await update.callback_query.answer("‚úÖ Pr√©visualisation envoy√©e")
        except Exception as e:
            logger.error(f"Erreur lors de l'envoi de la pr√©visualisation: {e}")
            await update.callback_query.answer("‚ùå Erreur lors de l'envoi de la pr√©visualisation")
    except Exception as e:
        logger.error(f"Erreur dans send_preview_file: {e}")
        if update.callback_query:
            await update.callback_query.answer("‚ùå Une erreur est survenue")

async def cleanup(application):
    """Nettoie les ressources avant l'arr√™t du bot"""
    try:
        # Fermer la connexion √† la base de donn√©es
        try:
            if db_manager:
                db_manager.close()
        except:
            pass
        
        # Arr√™ter le client Telethon
        try:
            if application.bot_data.get('userbot'):
                await application.bot_data['userbot'].disconnect()
        except:
            pass
        
        # Arr√™ter le scheduler depuis l'application
        try:
            if hasattr(application, 'scheduler_manager') and application.scheduler_manager:
                application.scheduler_manager.stop()
        except:
            pass
        
        logger.info("‚úÖ Nettoyage effectu√© avec succ√®s")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du nettoyage: {e}")

# -----------------------------------------------------------------------------
# GESTION SIMPLE DU BOUTON "ENVOYER" - UTILISE LES FONCTIONS EXISTANTES
# -----------------------------------------------------------------------------

async def handle_send_button(update, context):
    """G√®re le bouton 'Envoyer' du ReplyKeyboard en utilisant les fonctions existantes"""
    try:
        logger.info("Bouton 'Envoyer' activ√© par l'utilisateur")
        
        # V√©rifier si un post planifi√© est s√©lectionn√©
        if 'current_scheduled_post' in context.user_data:
            logger.info("Post planifi√© d√©tect√©, envoi imm√©diat")
            scheduled_post = context.user_data['current_scheduled_post']
            return await send_post_now(update, context, scheduled_post=scheduled_post)
        
        # V√©rifier s'il y a des posts en attente
        posts = context.user_data.get("posts", [])
        if not posts:
            await update.message.reply_text(
                "‚ùå Il n'y a pas encore de fichiers √† envoyer.\n"
                "Veuillez d'abord ajouter du contenu (texte, photo, vid√©o, document).",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üìù Cr√©er une publication", callback_data="create_publication")
                ], [
                    InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
                ]])
            )
            return WAITING_PUBLICATION_CONTENT
        
        # Obtenir les informations du canal
        selected_channel = context.user_data.get('selected_channel', {})
        channel = posts[0].get("channel") or selected_channel.get('username', '@default_channel')
        
        # Utiliser les M√äMES boutons que dans schedule_handler.py
        keyboard = [
            [InlineKeyboardButton("R√©gler temps d'auto destruction", callback_data="auto_destruction")],
            [InlineKeyboardButton("Maintenant", callback_data="send_now")],
            [InlineKeyboardButton("Planifier", callback_data="schedule_send")],
            [InlineKeyboardButton("‚Ü©Ô∏è Retour", callback_data="main_menu")]
        ]
        
        # Message identique √† celui de schedule_handler.py
        message = f"Vos {len(posts)} fichiers sont pr√™ts √† √™tre envoy√©s √† {channel}.\nQuand souhaitez-vous les envoyer ?"
        
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        logger.info(f"Menu d'envoi affich√© pour {len(posts)} fichiers vers {channel}")
        return WAITING_PUBLICATION_CONTENT
        
    except Exception as e:
        logger.error(f"Erreur dans handle_send_button: {e}")
        await update.message.reply_text(
            "‚ùå Une erreur est survenue lors de la pr√©paration de l'envoi.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
            ]])
        )
        return MAIN_MENU


def analyze_posts_content(posts):
    """Analyse et r√©sume le contenu des posts"""
    try:
        type_counts = {
            "photo": 0,
            "video": 0,
            "document": 0,
            "text": 0
        }
        
        total_reactions = 0
        total_buttons = 0
        
        for post in posts:
            post_type = post.get("type", "unknown")
            if post_type in type_counts:
                type_counts[post_type] += 1
            
            # Compter les r√©actions et boutons
            reactions = post.get("reactions", [])
            buttons = post.get("buttons", [])
            total_reactions += len(reactions)
            total_buttons += len(buttons)
        
        # Construire le r√©sum√©
        summary_parts = []
        total_files = sum(type_counts.values())
        
        if total_files == 1:
            # Un seul fichier
            for file_type, count in type_counts.items():
                if count > 0:
                    type_names = {
                        "photo": "üì∏ Photo",
                        "video": "üé• Vid√©o", 
                        "document": "üìÑ Document",
                        "text": "üìù Texte"
                    }
                    summary_parts.append(type_names.get(file_type, f"{file_type}"))
                    break
        else:
            # Plusieurs fichiers
            summary_parts.append(f"{total_files} fichiers")
            if type_counts["photo"] > 0:
                summary_parts.append(f"{type_counts['photo']} photo(s)")
            if type_counts["video"] > 0:
                summary_parts.append(f"{type_counts['video']} vid√©o(s)")
            if type_counts["document"] > 0:
                summary_parts.append(f"{type_counts['document']} document(s)")
            if type_counts["text"] > 0:
                summary_parts.append(f"{type_counts['text']} texte(s)")
        
        # Ajouter les extras
        extras = []
        if total_reactions > 0:
            extras.append(f"{total_reactions} r√©action(s)")
        if total_buttons > 0:
            extras.append(f"{total_buttons} bouton(s) URL")
        
        result = ", ".join(summary_parts)
        if extras:
            result += f" + {', '.join(extras)}"
            
        return result
        
    except Exception as e:
        logger.error(f"Erreur dans analyze_posts_content: {e}")
        return f"{len(posts)} fichier(s)"

def main():
    """Fonction principale du bot"""
    try:
        # Configuration de l'application
        application = Application.builder().token(settings.bot_token).build()

        # Ajout de logs pour le d√©marrage
        logger.info("üöÄ D√©marrage du bot...")
        logger.info(f"üì± Version Python: {platform.python_version()}")
        logger.info(f"üíª Syst√®me: {platform.system()} {platform.release()}")

        # Initialisation des compteurs de r√©actions globaux
        application.bot_data['reaction_counts'] = {}

        # Initialisation du scheduler
        application.scheduler_manager = SchedulerManager()
        application.scheduler_manager.start()
        logger.info("‚úÖ Scheduler d√©marr√© avec succ√®s")
        
        # V√©rifier que le scheduler fonctionne
        logger.info(f"üîç Scheduler running: {application.scheduler_manager.scheduler.running}")
        logger.info(f"üîç Scheduler state: {application.scheduler_manager.scheduler.state}")
        
        # D√©finir le scheduler manager global pour les callbacks
        from handlers.callback_handlers import set_global_scheduler_manager
        set_global_scheduler_manager(application.scheduler_manager)
        
        # D√©finir l'application globale pour les t√¢ches planifi√©es
        from utils.scheduler_utils import set_global_application
        set_global_application(application)
        
        # ‚úÖ CORRECTION : D√©finir aussi le scheduler manager dans scheduler_utils
        from utils.scheduler_utils import set_global_scheduler_manager as set_scheduler_utils_manager
        set_scheduler_utils_manager(application.scheduler_manager)

        # ‚úÖ NOUVEAU : Restaurer les posts planifi√©s depuis la base de donn√©es
        async def restore_scheduled_posts():
            """Restaure tous les posts planifi√©s depuis la base de donn√©es au d√©marrage"""
            try:
                logger.info("üîÑ Restauration des posts planifi√©s...")
                
                # R√©cup√©rer tous les posts planifi√©s non envoy√©s
                with sqlite3.connect(settings.db_config["path"]) as conn:
                    cursor = conn.cursor()
                    cursor.execute("""
                        SELECT id, scheduled_time, post_type, content, caption, channel_id
                        FROM posts 
                        WHERE scheduled_time > datetime('now') 
                        AND (status = 'pending' OR status IS NULL)
                    """)
                    scheduled_posts = cursor.fetchall()
                    
                if not scheduled_posts:
                    logger.info("‚úÖ Aucun post planifi√© √† restaurer")
                    return
                    
                restored_count = 0
                for post_data in scheduled_posts:
                    try:
                        post_id, scheduled_time_str, post_type, content, caption, channel_id = post_data
                        
                        # Parser la date avec le bon fuseau horaire
                        from datetime import datetime
                        import pytz
                        
                        # R√©cup√©rer le fuseau horaire depuis la base de donn√©es
                        # On cherche l'utilisateur propri√©taire du post
                        cursor.execute("SELECT c.user_id FROM channels c WHERE c.id = ?", (channel_id,))
                        user_result = cursor.fetchone()
                        
                        if user_result:
                            user_id = user_result[0]
                            cursor.execute("SELECT timezone FROM user_timezones WHERE user_id = ?", (user_id,))
                            tz_result = cursor.fetchone()
                            user_timezone = tz_result[0] if tz_result else 'Europe/Paris'
                        else:
                            user_timezone = 'Europe/Paris'  # Fallback
                        
                        scheduled_time = datetime.strptime(scheduled_time_str, '%Y-%m-%d %H:%M:%S')
                        # Localiser avec le bon fuseau horaire
                        scheduled_time = pytz.timezone(user_timezone).localize(scheduled_time)
                        
                        # Cr√©er le job
                        job_id = f"post_{post_id}"
                        
                        # ‚úÖ CORRECTION : Cr√©er une fonction wrapper synchrone simple
                        def send_restored_post_job(post_id=post_id):
                            """Fonction wrapper pour envoyer un post restaur√©"""
                            import asyncio
                            try:
                                # Cr√©er une nouvelle boucle pour le job
                                loop = asyncio.new_event_loop()
                                asyncio.set_event_loop(loop)
                                
                                # Fonction asynchrone pour envoyer le post
                                async def send_post_async():
                                    from utils.scheduler_utils import send_scheduled_file
                                    post_dict = {"id": post_id}
                                    await send_scheduled_file(post_dict, application)
                                
                                # Ex√©cuter la fonction asynchrone
                                loop.run_until_complete(send_post_async())
                                loop.close()
                                
                                logger.info(f"‚úÖ Post {post_id} envoy√© avec succ√®s")
                                
                            except Exception as job_error:
                                logger.error(f"‚ùå Erreur dans le job {post_id}: {job_error}")
                                logger.exception("Traceback:")
                        
                        # Ajouter le job au scheduler avec la fonction wrapper corrig√©e
                        application.scheduler_manager.scheduler.add_job(
                            func=send_restored_post_job,
                            trigger="date",
                            run_date=scheduled_time,
                            id=job_id,
                            replace_existing=True
                        )
                        
                        restored_count += 1
                        logger.info(f"‚úÖ Post {post_id} restaur√© pour {scheduled_time}")
                        
                    except Exception as e:
                        logger.error(f"‚ùå Erreur lors de la restauration du post {post_id}: {e}")
                        continue
                
                logger.info(f"‚úÖ {restored_count} posts planifi√©s restaur√©s avec succ√®s")
                
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la restauration des posts planifi√©s: {e}")
                logger.exception("Traceback:")
        
        # Ex√©cuter la restauration
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(restore_scheduled_posts())
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la restauration des posts: {e}")

        # ‚úÖ NOUVEAU : Ajouter une t√¢che de nettoyage automatique des vieux fichiers
        try:
            from utils.file_manager import FileManager
            file_manager = FileManager()
            
            # Fonction de nettoyage
            def cleanup_old_files_job():
                try:
                    logger.info("üßπ D√©but du nettoyage automatique des vieux fichiers...")
                    deleted_count = file_manager.cleanup_old_files(max_age_days=7)
                    logger.info(f"‚úÖ {deleted_count} fichiers supprim√©s")
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors du nettoyage des fichiers: {e}")
            
            # Planifier le nettoyage tous les jours √† 3h du matin
            application.scheduler_manager.scheduler.add_job(
                func=cleanup_old_files_job,
                trigger="cron",
                hour=3,
                minute=0,
                id="cleanup_old_files",
                replace_existing=True
            )
            logger.info("‚úÖ T√¢che de nettoyage automatique planifi√©e (tous les jours √† 3h)")
            
            # Ex√©cuter un nettoyage imm√©diat au d√©marrage
            cleanup_old_files_job()
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Impossible de planifier le nettoyage automatique: {e}")

        # Initialisation des clients Pyrogram/Telethon pour les gros fichiers
        async def init_clients():
            try:
                from utils.clients import client_manager
                await client_manager.start_clients()
                logger.info("‚úÖ Clients Pyrogram/Telethon d√©marr√©s pour la gestion des gros fichiers")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Impossible de d√©marrer les clients avanc√©s: {e}")
                logger.warning("Les fichiers > 50MB ne pourront pas √™tre trait√©s avec thumbnail personnalis√©")
        
        # D√©marrer les clients dans une t√¢che asynchrone
        try:
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(init_clients())
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©marrage clients: {e}")

        # Log des √©tats de conversation pour d√©bogage
        logger.info(f"D√©finition des √©tats de conversation:")
        logger.info(f"MAIN_MENU = {MAIN_MENU}")
        logger.info(f"POST_CONTENT = {POST_CONTENT}")
        logger.info(f"POST_ACTIONS = {POST_ACTIONS}")
        logger.info(f"WAITING_PUBLICATION_CONTENT = {WAITING_PUBLICATION_CONTENT}")
        logger.info(f"WAITING_REACTION_INPUT = {WAITING_REACTION_INPUT}")
        logger.info(f"WAITING_URL_INPUT = {WAITING_URL_INPUT}")

        # Initialisation du userbot Telethon
        userbot = TelegramClient(settings.session_name, settings.api_id, settings.api_hash)
        userbot.start()
        logger.info("Client Telethon d√©marr√© avec succ√®s")
        application.bot_data['userbot'] = userbot

        # Initialiser les command handlers
        from handlers.command_handlers import CommandHandlers
        
        # ‚úÖ CORRECTION : ScheduledTasks supprim√© - utiliser None
        command_handlers = CommandHandlers(db_manager, None)

        # D√©finition du ConversationHandler avec les diff√©rents √©tats
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("start", command_handlers.start),
                CommandHandler("create", command_handlers.create_publication),
                CommandHandler("settings", command_handlers.settings),
            ],
            states={
                MAIN_MENU: [
                    # Handler prioritaire pour les boutons ReplyKeyboard
                    MessageHandler(reply_keyboard_filter, handle_reply_keyboard),
                    CallbackQueryHandler(handle_callback),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text),
                ],
                POST_CONTENT: [
                    # Handler prioritaire pour les boutons ReplyKeyboard
                    MessageHandler(reply_keyboard_filter, handle_reply_keyboard),
                    MessageHandler(filters.Document.ALL, handle_media),
                    MessageHandler(filters.PHOTO, handle_media),
                    MessageHandler(filters.VIDEO, handle_media),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text),
                    CallbackQueryHandler(handle_callback),
                ],
                WAITING_REACTION_INPUT: [
                    MessageHandler(filters.TEXT, handle_reaction_input),
                    CallbackQueryHandler(handle_callback)
                ],
                WAITING_URL_INPUT: [
                    MessageHandler(filters.TEXT, handle_url_input),
                    CallbackQueryHandler(handle_callback)
                ],
                WAITING_CHANNEL_SELECTION: [
                    # Handler prioritaire pour les boutons ReplyKeyboard
                    MessageHandler(reply_keyboard_filter, handle_reply_keyboard),
                    CallbackQueryHandler(handle_callback),
                ],
                WAITING_THUMBNAIL: [
                    MessageHandler(filters.PHOTO, handle_thumbnail_input),
                ],
                WAITING_CUSTOM_USERNAME: [
                    # Handler prioritaire pour les boutons ReplyKeyboard
                    MessageHandler(reply_keyboard_filter, handle_reply_keyboard),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text),
                ],
                WAITING_CHANNEL_INFO: [
                    # Handler prioritaire pour les boutons ReplyKeyboard
                    MessageHandler(reply_keyboard_filter, handle_reply_keyboard),
                    MessageHandler(filters.TEXT, handle_channel_info),
                ],
                SETTINGS: [
                    # Handler prioritaire pour les boutons ReplyKeyboard
                    MessageHandler(reply_keyboard_filter, handle_reply_keyboard),
                    CallbackQueryHandler(handle_callback),
                ],
                POST_ACTIONS: [
                    # Handler prioritaire pour les boutons ReplyKeyboard
                    MessageHandler(reply_keyboard_filter, handle_reply_keyboard),
                    CallbackQueryHandler(handle_callback),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text),
                ],
                WAITING_PUBLICATION_CONTENT: [
                    # Handler prioritaire pour les boutons ReplyKeyboard
                    MessageHandler(reply_keyboard_filter, handle_reply_keyboard),
                    MessageHandler(filters.PHOTO, handle_post_content),
                    MessageHandler(filters.VIDEO, handle_post_content),
                    MessageHandler(filters.Document.ALL, handle_post_content),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_post_content),
                    CallbackQueryHandler(handle_callback),
                ],
                WAITING_RENAME_INPUT: [
                    MessageHandler(filters.TEXT, handle_rename_input),
                    CallbackQueryHandler(handle_callback),
                ],
                WAITING_TAG_INPUT: [
                    MessageHandler(filters.TEXT, handle_tag_input),
                    CallbackQueryHandler(handle_callback),
                ],
                SCHEDULE_SEND: [
                    # Handler pour la planification
                    MessageHandler(filters.TEXT, handle_schedule_time_wrapper),
                    CallbackQueryHandler(handle_callback),
                ],
                SCHEDULE_SELECT_CHANNEL: [
                    # Handler pour la s√©lection de canal planifi√©
                    CallbackQueryHandler(handle_callback),
                ],


            },
            fallbacks=[
                CommandHandler("cancel", lambda update, context: ConversationHandler.END),
                CommandHandler("start", command_handlers.start),
                # Handler de fallback pour les boutons ReplyKeyboard
                MessageHandler(reply_keyboard_filter, handle_reply_keyboard),
                CallbackQueryHandler(handle_callback),
            ],
            per_message=False,
            name="main_conversation",
            persistent=False,
            allow_reentry=True,
        )

        logger.info("ConversationHandler configur√© avec √©tats: %s",
                    ", ".join(str(state) for state in conv_handler.states.keys()))

        application.add_handler(conv_handler, group=0)  # Priorit√© normale apr√®s handler global
        logger.info("Ajout du handler de callback global")
        
        # Importer et utiliser le gestionnaire d'erreurs
        from handlers.command_handlers import error_handler
        application.add_error_handler(error_handler)

        # D√©marrage du bot
        application.run_polling()
        
    except Exception as e:
        logger.error(f"Erreur lors du d√©marrage du bot: {e}")
        raise
    finally:
        # Nettoyage √† la fin
        try:
            loop = asyncio.get_event_loop()
            if not loop.is_closed():
                loop.run_until_complete(cleanup(application))
        except RuntimeError:
            # Si la boucle est ferm√©e, cr√©er une nouvelle boucle
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(cleanup(application))
            loop.close()

if __name__ == '__main__':
    main()